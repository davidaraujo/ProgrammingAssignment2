{
    "contents" : "## Put comments here that give an overall description of what your\n## functions do\n\n## Write a short comment describing this function\n\n#makeVector <- function(x = numeric()) {\n#  m <- NULL\n# set <- function(y) {\n#    x <<- y\n#    m <<- NULL\n#  }\n#  get <- function() x\n#  setmean <- function(mean) m <<- mean\n#  getmean <- function() m\n#  list(set = set, get = get,\n#       setmean = setmean,\n#       getmean = getmean)\n#}\n\n\nmakeCacheMatrix <- function(x = matrix()) {\n\n  i <- NULL\n  set <- function(y) {\n    x <<- y\n    i <<- NULL\n  }\n  get <- function() x\n  setinverse <- function(solve) i <<- solve\n  getinverse <- function() i\n  list(set = set, get = get,\n       setinverse = setinverse,\n       getinverse = getinverse)\n  \n}\n\n\n## Write a short comment describing this function\n\n#cachemean <- function(x, ...) {\n#  m <- x$getmean()\n#  if(!is.null(m)) {\n#    message(\"getting cached data\")\n#    return(m)\n#  }\n#  data <- x$get()\n#  m <- mean(data, ...)\n#  x$setmean(m)\n#  m\n#}\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n  i <- x$getinverse()\n  if(!is.null(i)) {\n    message(\"getting cached data\")\n    return(i)\n  }\n  data <- x$get()\n  i <- solve(data, ...)\n  x$setinverse(i)\n  i\n}\n",
    "created" : 1407986473861.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1187457385",
    "id" : "43131DCB",
    "lastKnownWriteTime" : 1407994956,
    "path" : "~/GitHub/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}